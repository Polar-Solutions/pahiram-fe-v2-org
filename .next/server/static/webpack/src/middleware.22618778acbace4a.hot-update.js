"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./node_modules/path-to-regexp/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/path-to-regexp/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenData = void 0;\nexports.parse = parse;\nexports.compile = compile;\nexports.match = match;\nexports.pathToRegexp = pathToRegexp;\nconst DEFAULT_DELIMITER = \"/\";\nconst NOOP_VALUE = (value) => value;\nconst ID_CHAR = /^\\p{XID_Continue}$/u;\nconst DEBUG_URL = \"https://git.new/pathToRegexpError\";\nconst SIMPLE_TOKENS = {\n    \"!\": \"!\",\n    \"@\": \"@\",\n    \";\": \";\",\n    \",\": \",\",\n    \"*\": \"*\",\n    \"+\": \"+\",\n    \"?\": \"?\",\n    \"{\": \"{\",\n    \"}\": \"}\",\n};\n/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n    const chars = [...str];\n    const tokens = [];\n    let i = 0;\n    while (i < chars.length) {\n        const value = chars[i];\n        const type = SIMPLE_TOKENS[value];\n        if (type) {\n            tokens.push({ type, index: i++, value });\n            continue;\n        }\n        if (value === \"\\\\\") {\n            tokens.push({ type: \"ESCAPED\", index: i++, value: chars[i++] });\n            continue;\n        }\n        if (value === \":\") {\n            let name = \"\";\n            while (ID_CHAR.test(chars[++i])) {\n                name += chars[i];\n            }\n            if (!name) {\n                throw new TypeError(`Missing parameter name at ${i}`);\n            }\n            tokens.push({ type: \"NAME\", index: i, value: name });\n            continue;\n        }\n        if (value === \"(\") {\n            const pos = i++;\n            let count = 1;\n            let pattern = \"\";\n            if (chars[i] === \"?\") {\n                throw new TypeError(`Pattern cannot start with \"?\" at ${i}`);\n            }\n            while (i < chars.length) {\n                if (chars[i] === \"\\\\\") {\n                    pattern += chars[i++] + chars[i++];\n                    continue;\n                }\n                if (chars[i] === \")\") {\n                    count--;\n                    if (count === 0) {\n                        i++;\n                        break;\n                    }\n                }\n                else if (chars[i] === \"(\") {\n                    count++;\n                    if (chars[i + 1] !== \"?\") {\n                        throw new TypeError(`Capturing groups are not allowed at ${i}`);\n                    }\n                }\n                pattern += chars[i++];\n            }\n            if (count)\n                throw new TypeError(`Unbalanced pattern at ${pos}`);\n            if (!pattern)\n                throw new TypeError(`Missing pattern at ${pos}`);\n            tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n            continue;\n        }\n        tokens.push({ type: \"CHAR\", index: i, value: chars[i++] });\n    }\n    tokens.push({ type: \"END\", index: i, value: \"\" });\n    return new Iter(tokens);\n}\nclass Iter {\n    constructor(tokens) {\n        this.tokens = tokens;\n        this.index = 0;\n    }\n    peek() {\n        return this.tokens[this.index];\n    }\n    tryConsume(type) {\n        const token = this.peek();\n        if (token.type !== type)\n            return;\n        this.index++;\n        return token.value;\n    }\n    consume(type) {\n        const value = this.tryConsume(type);\n        if (value !== undefined)\n            return value;\n        const { type: nextType, index } = this.peek();\n        throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}: ${DEBUG_URL}`);\n    }\n    text() {\n        let result = \"\";\n        let value;\n        while ((value = this.tryConsume(\"CHAR\") || this.tryConsume(\"ESCAPED\"))) {\n            result += value;\n        }\n        return result;\n    }\n    modifier() {\n        return this.tryConsume(\"?\") || this.tryConsume(\"*\") || this.tryConsume(\"+\");\n    }\n}\n/**\n * Tokenized path instance. Can we passed around instead of string.\n */\nclass TokenData {\n    constructor(tokens, delimiter) {\n        this.tokens = tokens;\n        this.delimiter = delimiter;\n    }\n}\nexports.TokenData = TokenData;\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options = {}) {\n    const { encodePath = NOOP_VALUE, delimiter = encodePath(DEFAULT_DELIMITER) } = options;\n    const tokens = [];\n    const it = lexer(str);\n    let key = 0;\n    do {\n        const path = it.text();\n        if (path)\n            tokens.push(encodePath(path));\n        const name = it.tryConsume(\"NAME\");\n        const pattern = it.tryConsume(\"PATTERN\");\n        if (name || pattern) {\n            tokens.push({\n                name: name || String(key++),\n                pattern,\n            });\n            const next = it.peek();\n            if (next.type === \"*\") {\n                throw new TypeError(`Unexpected * at ${next.index}, you probably want \\`/*\\` or \\`{/:foo}*\\`: ${DEBUG_URL}`);\n            }\n            continue;\n        }\n        const asterisk = it.tryConsume(\"*\");\n        if (asterisk) {\n            tokens.push({\n                name: String(key++),\n                pattern: `(?:(?!${escape(delimiter)}).)*`,\n                modifier: \"*\",\n                separator: delimiter,\n            });\n            continue;\n        }\n        const open = it.tryConsume(\"{\");\n        if (open) {\n            const prefix = it.text();\n            const name = it.tryConsume(\"NAME\");\n            const pattern = it.tryConsume(\"PATTERN\");\n            const suffix = it.text();\n            const separator = it.tryConsume(\";\") && it.text();\n            it.consume(\"}\");\n            const modifier = it.modifier();\n            tokens.push({\n                name: name || (pattern ? String(key++) : \"\"),\n                prefix: encodePath(prefix),\n                suffix: encodePath(suffix),\n                pattern,\n                modifier,\n                separator,\n            });\n            continue;\n        }\n        it.consume(\"END\");\n        break;\n    } while (true);\n    return new TokenData(tokens, delimiter);\n}\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(path, options = {}) {\n    const data = path instanceof TokenData ? path : parse(path, options);\n    return compileTokens(data, options);\n}\n/**\n * Convert a single token into a path building function.\n */\nfunction tokenToFunction(token, encode) {\n    if (typeof token === \"string\") {\n        return () => token;\n    }\n    const encodeValue = encode || NOOP_VALUE;\n    const repeated = token.modifier === \"+\" || token.modifier === \"*\";\n    const optional = token.modifier === \"?\" || token.modifier === \"*\";\n    const { prefix = \"\", suffix = \"\", separator = suffix + prefix } = token;\n    if (encode && repeated) {\n        const stringify = (value, index) => {\n            if (typeof value !== \"string\") {\n                throw new TypeError(`Expected \"${token.name}/${index}\" to be a string`);\n            }\n            return encodeValue(value);\n        };\n        const compile = (value) => {\n            if (!Array.isArray(value)) {\n                throw new TypeError(`Expected \"${token.name}\" to be an array`);\n            }\n            if (value.length === 0)\n                return \"\";\n            return prefix + value.map(stringify).join(separator) + suffix;\n        };\n        if (optional) {\n            return (data) => {\n                const value = data[token.name];\n                if (value == null)\n                    return \"\";\n                return value.length ? compile(value) : \"\";\n            };\n        }\n        return (data) => {\n            const value = data[token.name];\n            return compile(value);\n        };\n    }\n    const stringify = (value) => {\n        if (typeof value !== \"string\") {\n            throw new TypeError(`Expected \"${token.name}\" to be a string`);\n        }\n        return prefix + encodeValue(value) + suffix;\n    };\n    if (optional) {\n        return (data) => {\n            const value = data[token.name];\n            if (value == null)\n                return \"\";\n            return stringify(value);\n        };\n    }\n    return (data) => {\n        const value = data[token.name];\n        return stringify(value);\n    };\n}\n/**\n * Transform tokens into a path building function.\n */\nfunction compileTokens(data, options) {\n    const { encode = encodeURIComponent, loose = true, validate = true, strict = false, } = options;\n    const flags = toFlags(options);\n    const stringify = toStringify(loose, data.delimiter);\n    const sources = toRegExpSource(data, stringify, [], flags, strict);\n    // Compile all the tokens into regexps.\n    const encoders = data.tokens.map((token, index) => {\n        const fn = tokenToFunction(token, encode);\n        if (!validate || typeof token === \"string\")\n            return fn;\n        const validRe = new RegExp(`^${sources[index]}$`, flags);\n        return (data) => {\n            const value = fn(data);\n            if (!validRe.test(value)) {\n                throw new TypeError(`Invalid value for \"${token.name}\": ${JSON.stringify(value)}`);\n            }\n            return value;\n        };\n    });\n    return function path(data = {}) {\n        let path = \"\";\n        for (const encoder of encoders)\n            path += encoder(data);\n        return path;\n    };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match(path, options = {}) {\n    const { decode = decodeURIComponent, loose = true } = options;\n    const data = path instanceof TokenData ? path : parse(path, options);\n    const stringify = toStringify(loose, data.delimiter);\n    const keys = [];\n    const re = tokensToRegexp(data, keys, options);\n    const decoders = keys.map((key) => {\n        if (decode && (key.modifier === \"+\" || key.modifier === \"*\")) {\n            const { prefix = \"\", suffix = \"\", separator = suffix + prefix } = key;\n            const re = new RegExp(stringify(separator), \"g\");\n            return (value) => value.split(re).map(decode);\n        }\n        return decode || NOOP_VALUE;\n    });\n    return function match(input) {\n        const m = re.exec(input);\n        if (!m)\n            return false;\n        const { 0: path, index } = m;\n        const params = Object.create(null);\n        for (let i = 1; i < m.length; i++) {\n            if (m[i] === undefined)\n                continue;\n            const key = keys[i - 1];\n            const decoder = decoders[i - 1];\n            params[key.name] = decoder(m[i]);\n        }\n        return { path, index, params };\n    };\n}\n/**\n * Escape a regular expression string.\n */\nfunction escape(str) {\n    return str.replace(/([.+*?^${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Escape and repeat loose characters for regular expressions.\n */\nfunction looseReplacer(value, loose) {\n    const escaped = escape(value);\n    return loose ? `(?:${escaped})+(?!${escaped})` : escaped;\n}\n/**\n * Encode all non-delimiter characters using the encode function.\n */\nfunction toStringify(loose, delimiter) {\n    if (!loose)\n        return escape;\n    const re = new RegExp(`(?:(?!${escape(delimiter)}).)+|(.)`, \"g\");\n    return (value) => value.replace(re, looseReplacer);\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction toFlags(options) {\n    return options.sensitive ? \"\" : \"i\";\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nfunction tokensToRegexp(data, keys, options) {\n    const { trailing = true, loose = true, start = true, end = true, strict = false, } = options;\n    const flags = toFlags(options);\n    const stringify = toStringify(loose, data.delimiter);\n    const sources = toRegExpSource(data, stringify, keys, flags, strict);\n    let pattern = start ? \"^\" : \"\";\n    pattern += sources.join(\"\");\n    if (trailing)\n        pattern += `(?:${stringify(data.delimiter)})?`;\n    pattern += end ? \"$\" : `(?=${escape(data.delimiter)}|$)`;\n    return new RegExp(pattern, flags);\n}\n/**\n * Convert a token into a regexp string (re-used for path validation).\n */\nfunction toRegExpSource(data, stringify, keys, flags, strict) {\n    const defaultPattern = `(?:(?!${escape(data.delimiter)}).)+?`;\n    let backtrack = \"\";\n    let safe = true;\n    return data.tokens.map((token, index) => {\n        if (typeof token === \"string\") {\n            backtrack = token;\n            return stringify(token);\n        }\n        const { prefix = \"\", suffix = \"\", separator = suffix + prefix, modifier = \"\", } = token;\n        const pre = stringify(prefix);\n        const post = stringify(suffix);\n        if (token.name) {\n            const pattern = token.pattern ? `(?:${token.pattern})` : defaultPattern;\n            const re = checkPattern(pattern, token.name, flags);\n            safe || (safe = safePattern(re, prefix || backtrack));\n            if (!safe) {\n                throw new TypeError(`Ambiguous pattern for \"${token.name}\": ${DEBUG_URL}`);\n            }\n            safe = !strict || safePattern(re, suffix);\n            backtrack = \"\";\n            keys.push(token);\n            if (modifier === \"+\" || modifier === \"*\") {\n                const mod = modifier === \"*\" ? \"?\" : \"\";\n                const sep = stringify(separator);\n                if (!sep) {\n                    throw new TypeError(`Missing separator for \"${token.name}\": ${DEBUG_URL}`);\n                }\n                safe || (safe = !strict || safePattern(re, separator));\n                if (!safe) {\n                    throw new TypeError(`Ambiguous pattern for \"${token.name}\" separator: ${DEBUG_URL}`);\n                }\n                safe = !strict;\n                return `(?:${pre}(${pattern}(?:${sep}${pattern})*)${post})${mod}`;\n            }\n            return `(?:${pre}(${pattern})${post})${modifier}`;\n        }\n        return `(?:${pre}${post})${modifier}`;\n    });\n}\nfunction checkPattern(pattern, name, flags) {\n    try {\n        return new RegExp(`^${pattern}$`, flags);\n    }\n    catch (err) {\n        throw new TypeError(`Invalid pattern for \"${name}\": ${err.message}`);\n    }\n}\nfunction safePattern(re, value) {\n    return value ? !re.test(value) : false;\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nfunction pathToRegexp(path, options = {}) {\n    const data = path instanceof TokenData ? path : parse(path, options);\n    const keys = [];\n    const regexp = tokensToRegexp(data, keys, options);\n    return Object.assign(regexp, { keys });\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/path-to-regexp/dist/index.js\n");

/***/ }),

/***/ "(middleware)/./src/middleware.ts":
/*!***************************!*\
  !*** ./src/middleware.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_easy_middlewares__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-easy-middlewares */ \"(middleware)/./node_modules/next-easy-middlewares/dist/index.js\");\n/* harmony import */ var _utils_middleware_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/middleware-class */ \"(middleware)/./src/utils/middleware-class.ts\");\n\n\nconst middlewareUtils = new _utils_middleware_class__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\nconst globalMiddlewares = {\n    before: middlewareUtils.isUserAuthenticated()\n};\nconst middlewares = {\n    \"/\": [\n        async ({ request, response })=>{\n            console.log(\"Hello from next-easy-middlewares\", request.nextUrl.pathname);\n            return response;\n        }\n    ]\n};\nconst middleware = (0,next_easy_middlewares__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(middlewares, globalMiddlewares);\nconst config = {\n    matcher: [\n        \"/((?!.*\\\\..*|_next|public|public/.*|.*\\\\.css$).*)\",\n        \"/\",\n        \"/(api|trpc)(.*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vc3JjL21pZGRsZXdhcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnSDtBQUN6RDtBQUV2RCxNQUFNRSxrQkFBa0IsSUFBSUQsK0RBQWVBO0FBRTNDLE1BQU1FLG9CQUFvQjtJQUN4QkMsUUFBUUYsZ0JBQWdCRyxtQkFBbUI7QUFDN0M7QUFFQSxNQUFNQyxjQUFjO0lBQ2xCLEtBQUs7UUFDSCxPQUFPLEVBQUNDLE9BQU8sRUFBRUMsUUFBUSxFQUEwQjtZQUNqREMsUUFBUUMsR0FBRyxDQUFDLG9DQUFvQ0gsUUFBUUksT0FBTyxDQUFDQyxRQUFRO1lBQ3hFLE9BQU9KO1FBQ1Q7S0FDRDtBQUNIO0FBRU8sTUFBTUssYUFBYWIsdUVBQWdCQSxDQUFDTSxhQUFhSCxtQkFBbUI7QUFFcEUsTUFBTVcsU0FBUztJQUNwQkMsU0FBUztRQUNQO1FBQ0E7UUFDQTtLQUNEO0FBQ0gsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbWlkZGxld2FyZS50cz9kMTk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU1pZGRsZXdhcmUsIHR5cGUgTWlkZGxld2FyZUZ1bmN0aW9uUHJvcHMsIHR5cGUgTWlkZGxld2FyZUZ1bmN0aW9uIH0gZnJvbSAnbmV4dC1lYXN5LW1pZGRsZXdhcmVzJztcclxuaW1wb3J0IE1pZGRsZXdhcmVVdGlscyBmcm9tIFwiQC91dGlscy9taWRkbGV3YXJlLWNsYXNzXCI7XHJcblxyXG5jb25zdCBtaWRkbGV3YXJlVXRpbHMgPSBuZXcgTWlkZGxld2FyZVV0aWxzKClcclxuXHJcbmNvbnN0IGdsb2JhbE1pZGRsZXdhcmVzID0ge1xyXG4gIGJlZm9yZTogbWlkZGxld2FyZVV0aWxzLmlzVXNlckF1dGhlbnRpY2F0ZWQoKSBhcyBNaWRkbGV3YXJlRnVuY3Rpb25cclxufTtcclxuXHJcbmNvbnN0IG1pZGRsZXdhcmVzID0ge1xyXG4gICcvJzogW1xyXG4gICAgYXN5bmMgKHtyZXF1ZXN0LCByZXNwb25zZX06IE1pZGRsZXdhcmVGdW5jdGlvblByb3BzKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdIZWxsbyBmcm9tIG5leHQtZWFzeS1taWRkbGV3YXJlcycsIHJlcXVlc3QubmV4dFVybC5wYXRobmFtZSk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0sXHJcbiAgXSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtaWRkbGV3YXJlID0gY3JlYXRlTWlkZGxld2FyZShtaWRkbGV3YXJlcywgZ2xvYmFsTWlkZGxld2FyZXMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBtYXRjaGVyOiBbXHJcbiAgICBcIi8oKD8hLipcXFxcLi4qfF9uZXh0fHB1YmxpY3xwdWJsaWMvLip8LipcXFxcLmNzcyQpLiopXCIsXHJcbiAgICBcIi9cIixcclxuICAgIFwiLyhhcGl8dHJwYykoLiopXCJcclxuICBdXHJcbn07Il0sIm5hbWVzIjpbImNyZWF0ZU1pZGRsZXdhcmUiLCJNaWRkbGV3YXJlVXRpbHMiLCJtaWRkbGV3YXJlVXRpbHMiLCJnbG9iYWxNaWRkbGV3YXJlcyIsImJlZm9yZSIsImlzVXNlckF1dGhlbnRpY2F0ZWQiLCJtaWRkbGV3YXJlcyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJuZXh0VXJsIiwicGF0aG5hbWUiLCJtaWRkbGV3YXJlIiwiY29uZmlnIiwibWF0Y2hlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./src/middleware.ts\n");

/***/ }),

/***/ "(middleware)/./node_modules/next-easy-middlewares/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/next-easy-middlewares/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMiddleware: () => (/* binding */ m)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path-to-regexp */ \"(middleware)/./node_modules/path-to-regexp/dist/index.js\");\nfunction m(e,t){let s=new Map;return async(o,a)=>{let n=o.nextUrl.pathname||\"/\",r=[],i=[];t?.before&&(Array.isArray(t.before)?r=t.before.filter(Boolean).flat():r=[t.before].filter(Boolean).flat()),t?.after&&(Array.isArray(t.after)?i=t.after.filter(Boolean).flat():i=[t.after].filter(Boolean).flat());let u=[...r.flat(),...Object.entries(e).filter(([d])=>R(d,n)).flatMap(([,d])=>d),...i.flat()],c=next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();for(let d of u)c=await l(o,d,c,a,s),o=N(o,c);return c}}async function l(e,t,s,o,a){let n=w(await t({request:e,response:s,event:o,context:a}));return s&&s.headers.forEach((r,i)=>{n.headers.set(i,r)}),n.cookies.getAll().forEach(r=>{e.cookies.set(r)}),h(n)&&e.headers.set(\"x-redirect-url\",n.headers.get(\"location\")??\"\"),n}function R(e,t){return (0,path_to_regexp__WEBPACK_IMPORTED_MODULE_1__.pathToRegexp)(e).test(t)}function h(e){return!!(e&&[301,302,303,307,308].includes(e.status))}function N(e,t){let s=new Headers(e.headers);t.headers.forEach((n,r)=>{s.set(r,n)});let o=new URL(e.url),a=new next_server__WEBPACK_IMPORTED_MODULE_0__.NextRequest(o,{headers:s,method:e.method,body:e.body,referrer:e.referrer});return t.cookies.getAll().forEach(n=>{a.cookies.set(n.name,n.value)}),a}function w(e){if(e instanceof next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse)return e;let t=new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(e.body,{status:e.status,statusText:e.statusText,headers:e.headers});return e.headers.forEach((s,o)=>{t.headers.set(o,s)}),t}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQtZWFzeS1taWRkbGV3YXJlcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwRyxnQkFBZ0IsY0FBYyxvQkFBb0Isd0NBQXdDLGtOQUFrTixnR0FBZ0cscURBQUMsUUFBUSw2Q0FBNkMsVUFBVSw0QkFBNEIsaUJBQWlCLHVDQUF1QyxHQUFHLG9DQUFvQyxtQkFBbUIsaUNBQWlDLGlCQUFpQix3RUFBd0UsZ0JBQWdCLE9BQU8sNERBQUMsWUFBWSxjQUFjLHNEQUFzRCxnQkFBZ0IsNkJBQTZCLDBCQUEwQixXQUFXLEVBQUUsMkJBQTJCLG9EQUFDLElBQUksMERBQTBELEVBQUUsc0NBQXNDLDhCQUE4QixJQUFJLGNBQWMsZ0JBQWdCLHFEQUFDLFVBQVUsVUFBVSxxREFBQyxTQUFTLDBEQUEwRCxFQUFFLGlDQUFpQyxtQkFBbUIsSUFBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQtZWFzeS1taWRkbGV3YXJlcy9kaXN0L2luZGV4LmpzPzBhNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e05leHRSZXF1ZXN0IGFzIHAsTmV4dFJlc3BvbnNlIGFzIGZ9ZnJvbVwibmV4dC9zZXJ2ZXJcIjtpbXBvcnR7cGF0aFRvUmVnZXhwIGFzIHh9ZnJvbVwicGF0aC10by1yZWdleHBcIjtmdW5jdGlvbiBtKGUsdCl7bGV0IHM9bmV3IE1hcDtyZXR1cm4gYXN5bmMobyxhKT0+e2xldCBuPW8ubmV4dFVybC5wYXRobmFtZXx8XCIvXCIscj1bXSxpPVtdO3Q/LmJlZm9yZSYmKEFycmF5LmlzQXJyYXkodC5iZWZvcmUpP3I9dC5iZWZvcmUuZmlsdGVyKEJvb2xlYW4pLmZsYXQoKTpyPVt0LmJlZm9yZV0uZmlsdGVyKEJvb2xlYW4pLmZsYXQoKSksdD8uYWZ0ZXImJihBcnJheS5pc0FycmF5KHQuYWZ0ZXIpP2k9dC5hZnRlci5maWx0ZXIoQm9vbGVhbikuZmxhdCgpOmk9W3QuYWZ0ZXJdLmZpbHRlcihCb29sZWFuKS5mbGF0KCkpO2xldCB1PVsuLi5yLmZsYXQoKSwuLi5PYmplY3QuZW50cmllcyhlKS5maWx0ZXIoKFtkXSk9PlIoZCxuKSkuZmxhdE1hcCgoWyxkXSk9PmQpLC4uLmkuZmxhdCgpXSxjPWYubmV4dCgpO2ZvcihsZXQgZCBvZiB1KWM9YXdhaXQgbChvLGQsYyxhLHMpLG89TihvLGMpO3JldHVybiBjfX1hc3luYyBmdW5jdGlvbiBsKGUsdCxzLG8sYSl7bGV0IG49dyhhd2FpdCB0KHtyZXF1ZXN0OmUscmVzcG9uc2U6cyxldmVudDpvLGNvbnRleHQ6YX0pKTtyZXR1cm4gcyYmcy5oZWFkZXJzLmZvckVhY2goKHIsaSk9PntuLmhlYWRlcnMuc2V0KGkscil9KSxuLmNvb2tpZXMuZ2V0QWxsKCkuZm9yRWFjaChyPT57ZS5jb29raWVzLnNldChyKX0pLGgobikmJmUuaGVhZGVycy5zZXQoXCJ4LXJlZGlyZWN0LXVybFwiLG4uaGVhZGVycy5nZXQoXCJsb2NhdGlvblwiKT8/XCJcIiksbn1mdW5jdGlvbiBSKGUsdCl7cmV0dXJuIHgoZSkudGVzdCh0KX1mdW5jdGlvbiBoKGUpe3JldHVybiEhKGUmJlszMDEsMzAyLDMwMywzMDcsMzA4XS5pbmNsdWRlcyhlLnN0YXR1cykpfWZ1bmN0aW9uIE4oZSx0KXtsZXQgcz1uZXcgSGVhZGVycyhlLmhlYWRlcnMpO3QuaGVhZGVycy5mb3JFYWNoKChuLHIpPT57cy5zZXQocixuKX0pO2xldCBvPW5ldyBVUkwoZS51cmwpLGE9bmV3IHAobyx7aGVhZGVyczpzLG1ldGhvZDplLm1ldGhvZCxib2R5OmUuYm9keSxyZWZlcnJlcjplLnJlZmVycmVyfSk7cmV0dXJuIHQuY29va2llcy5nZXRBbGwoKS5mb3JFYWNoKG49PnthLmNvb2tpZXMuc2V0KG4ubmFtZSxuLnZhbHVlKX0pLGF9ZnVuY3Rpb24gdyhlKXtpZihlIGluc3RhbmNlb2YgZilyZXR1cm4gZTtsZXQgdD1uZXcgZihlLmJvZHkse3N0YXR1czplLnN0YXR1cyxzdGF0dXNUZXh0OmUuc3RhdHVzVGV4dCxoZWFkZXJzOmUuaGVhZGVyc30pO3JldHVybiBlLmhlYWRlcnMuZm9yRWFjaCgocyxvKT0+e3QuaGVhZGVycy5zZXQobyxzKX0pLHR9ZXhwb3J0e20gYXMgY3JlYXRlTWlkZGxld2FyZX07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next-easy-middlewares/dist/index.js\n");

/***/ })

});